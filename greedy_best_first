from queue import PriorityQueue
v=int(input())
graph=[[] for i in range(v)]
def best_first_search(src,target,n):
    visited=[False]*n
    pq=PriorityQueue()
    pq.put((0,src))
    while pq.empty()==False:
        u=pq.get()[1]
        print(u,end=" ")
        if u==target:
            break
        for v,c in graph[u]: #vertex,#cost
            if visited[v]==False:
                visited[v]=True
                pq.put((c,v))
        print()
def addedge(x, y, cost):
    graph[x].append((y, cost))
    graph[y].append((x, cost))
for i in range(v-1):
    x,y,z=map(int,input('x,y,z:').split())
    addedge(x,y,z)
src=int(input())
target=int(input())
best_first_search(src, target, v)
# addedge(0, 1, 3)
# addedge(0, 2, 6)
# addedge(0, 3, 5)
# addedge(1, 4, 9)
# addedge(1, 5, 8)
# addedge(2, 6, 12)
# addedge(2, 7, 14)
# addedge(3, 8, 7)
# addedge(8, 9, 5)
# addedge(8, 10, 6)
# addedge(9, 11, 1)
# addedge(9, 12, 10)
# addedge(9, 13, 2)
